@startuml

interface IRecordRepository{
 + GetByIdAsync(int id): Task<Record>
}
interface IScheduleRepository{
+GetByDoctorIdAndPatientId(int doctorId, int patientId): Task<Schedule>
}
interface IUnitOfWork
class ScheduleDto{
+StartAt: DateTime
+EndAt: DateTime
+PatientId: int
+DoctorId: int
+StatusScheduleEnum: Status
+IsPatientConfirm: Boolean
+IsAvailable: Boolean
+Description: string
}

class RecordRepository {
 + GetByIdAsync(int id): Task<Record>
}
class ScheduleRepository{
+ GetByDoctorIdAndPatientId(int doctorId, int patientId):Task<Schedule>
}

class ChangeRecordStatusUseCase {
  - _scheduleRepository: IScheduleRepository
  - _unitOfWork: IUnitOfWork
  - _recordRepository: IRecordRepository
  +ExecuteAsync(int recordId): Task<ApiResponse<ScheduleDto, List<string>>>
  +RoundToNearestQuarterHour(DateTime dt): DateTime
}


class RecordController {
  - _changeRecordStatusUseCase: ChangeRecordStatusUseCase
  + ChangeRecordStatus(int recordId): Task<IActionResult>
}

ChangeRecordStatusUseCase ..> ScheduleDto
IRecordRepository <|.. RecordRepository
IRecordRepository <.. ChangeRecordStatusUseCase
IScheduleRepository <|.. ScheduleRepository
IScheduleRepository <.. ChangeRecordStatusUseCase
IUnitOfWork <.. ChangeRecordStatusUseCase
RecordController ..> ChangeRecordStatusUseCase

@enduml