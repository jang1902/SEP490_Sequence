@startuml
interface IUserRepository{
GetUserByIdAsync(int UserId): User
}
interface IUnitOfWork

class UserRepository {
GetUserByIdAsync(int UserId): User
}

  class ChangePasswordUseCase {
    -  _UserRepository: IUserRepository
      - _unitOfWork: IUnitOfWork
      - _validator: IValidator<ChangePasswordRequest>
  + ChangePasswordAsync(ChangePasswordRequest request, int userId): Task<(List<string>, string)>
  }

class ChangePasswordValidator {
  + ChangePasswordValidator()
}

class UserController {
  - _changePassword: ChangePasswordUseCase
  + ChangePassword(ChangePasswordRequest request): Task<IActionResult>
}

class ChangePasswordRequest {
  +  OldPassword: string
  +  NewPassword: string
  +  ConfirmPassword: string
}

IUserRepository <|.. UserRepository
ChangePasswordUseCase ..> IUserRepository
IUnitOfWork <.. ChangePasswordUseCase


ChangePasswordUseCase ..> ChangePasswordRequest
UserController ..> ChangePasswordUseCase
UserController ..> ChangePasswordRequest
interface IValidator<T>
IValidator <|.. ChangePasswordValidator
IValidator <.. ChangePasswordUseCase
@enduml
